# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def NodeToInt(self,nodeli):
        '''
        :type nodeli:ListNode
        :return: int
        '''
        nlist = nodeli
        num = str(nlist.val)
        while nlist.next != None:
            nlist = nlist.next
            num = num+str(nlist.val)
        num = int(str(num)[::-1])
        return num

    def intToNode(self,num):
        '''
        :param num:the num
        :type num:int
        :return: ListNode
        '''
        numString = str(num)
        listnodes = None
        for i in range(0,len(numString)):
            li = ListNode(int(numString[i]))
            li.next = listnodes
            listnodes = li
        return listnodes

    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if l1.val == 0 and l1.next == None:
            return l2
        elif l2.val == 0 and l2.next == None:
            return l1
        num1=self.NodeToInt(l1)
        print(num1)
        num2=self.NodeToInt(l2)
        print(num2)
        ln = self.intToNode(num1+num2)
        return ln
